{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nexport var save = function save(dataKey, state, user, edit) {\n  var laudos, currentLaudos, indexFindReport;\n  return _regeneratorRuntime.async(function save$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          state.LaudoVeicular.Data.Cabecalho.Perito = user.id;\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(dataKey));\n\n        case 4:\n          laudos = _context.sent;\n          currentLaudos = laudos ? JSON.parse(laudos) : [];\n          indexFindReport = currentLaudos.findIndex(function (element) {\n            return element.LaudoVeicular.id == state.LaudoVeicular.id;\n          });\n\n          if (!edit) {\n            state.LaudoVeicular.statusDoLaudo.completo = true;\n          }\n\n          if (!(indexFindReport != -1)) {\n            _context.next = 14;\n            break;\n          }\n\n          currentLaudos[indexFindReport] = state;\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(dataKey, JSON.stringify(currentLaudos)));\n\n        case 12:\n          _context.next = 16;\n          break;\n\n        case 14:\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(dataKey, JSON.stringify([].concat(_toConsumableArray(currentLaudos), [state]))));\n\n        case 16:\n          return _context.abrupt(\"return\", \"sucess\");\n\n        case 19:\n          _context.prev = 19;\n          _context.t0 = _context[\"catch\"](1);\n          Alert.alert(\"Erro\", \"Não foi possível cadastrar o laudo\");\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 19]], Promise);\n};\nexport var update = function update(dataKey, state) {\n  var laudos, currentLaudos, indexFindReport;\n  return _regeneratorRuntime.async(function update$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(dataKey));\n\n        case 3:\n          laudos = _context2.sent;\n          currentLaudos = laudos ? JSON.parse(laudos) : [];\n          indexFindReport = currentLaudos.findIndex(function (element) {\n            return element.LaudoVeicular.id == state.LaudoVeicular.id;\n          });\n\n          if (!(indexFindReport != -1)) {\n            _context2.next = 12;\n            break;\n          }\n\n          currentLaudos[indexFindReport] = state;\n          _context2.next = 10;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(dataKey, JSON.stringify(currentLaudos)));\n\n        case 10:\n          _context2.next = 14;\n          break;\n\n        case 12:\n          _context2.next = 14;\n          return _regeneratorRuntime.awrap(AsyncStorage.setItem(dataKey, JSON.stringify([].concat(_toConsumableArray(currentLaudos), [state]))));\n\n        case 14:\n          return _context2.abrupt(\"return\", \"sucess\");\n\n        case 17:\n          _context2.prev = 17;\n          _context2.t0 = _context2[\"catch\"](0);\n          Alert.alert(\"Erro\", \"Não foi possível cadastrar o laudo\");\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 17]], Promise);\n};\nvar all = {\n  save: save\n};\nexport default all;","map":{"version":3,"sources":["/home/amanda-kenzie/Documents/Faculdade/TCC/mobile/app-react-native-report/src/services/database/storage.ts"],"names":["AsyncStorage","save","dataKey","state","user","edit","LaudoVeicular","Data","Cabecalho","Perito","id","getItem","laudos","currentLaudos","JSON","parse","indexFindReport","findIndex","element","statusDoLaudo","completo","setItem","stringify","Alert","alert","update","all"],"mappings":"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","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nimport { Alert } from \"react-native\";\n\nexport const save = async (\n  dataKey: string,\n  state: any,\n  user?: any,\n  edit?: boolean\n) => {\n  state.LaudoVeicular.Data.Cabecalho.Perito = user.id;\n  try {\n    const laudos = await AsyncStorage.getItem(dataKey);\n    const currentLaudos = laudos ? JSON.parse(laudos) : [];\n    const indexFindReport = currentLaudos.findIndex(\n      (element: any) => element.LaudoVeicular.id == state.LaudoVeicular.id\n    );\n    if (!edit) {\n      state.LaudoVeicular.statusDoLaudo.completo = true;\n    }\n\n    if (indexFindReport != -1) {\n      currentLaudos[indexFindReport] = state;\n\n      await AsyncStorage.setItem(dataKey, JSON.stringify(currentLaudos));\n    } else {\n      await AsyncStorage.setItem(\n        dataKey,\n        JSON.stringify([...currentLaudos, state])\n      );\n    }\n\n    return \"sucess\";\n  } catch (error) {\n    Alert.alert(\"Erro\", \"Não foi possível cadastrar o laudo\");\n  }\n};\n\nexport const update = async (dataKey: string, state: any) => {\n  try {\n    const laudos = await AsyncStorage.getItem(dataKey);\n    const currentLaudos = laudos ? JSON.parse(laudos) : [];\n    const indexFindReport = currentLaudos.findIndex(\n      (element: any) => element.LaudoVeicular.id == state.LaudoVeicular.id\n    );\n\n    if (indexFindReport != -1) {\n      currentLaudos[indexFindReport] = state;\n\n      await AsyncStorage.setItem(dataKey, JSON.stringify(currentLaudos));\n    } else {\n      await AsyncStorage.setItem(\n        dataKey,\n        JSON.stringify([...currentLaudos, state])\n      );\n    }\n\n    return \"sucess\";\n  } catch (error) {\n    Alert.alert(\"Erro\", \"Não foi possível cadastrar o laudo\");\n  }\n};\nconst all = {\n  save,\n};\n\nexport default all;\n"]},"metadata":{},"sourceType":"module"}